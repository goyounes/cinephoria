services:
  mysql:
    image: mysql:8.0                     # Image officielle de MySQL version 8
    command: --default-time-zone=SYSTEM  # Utiliser le fuseau horaire du système
    container_name: mysql_db             # Nom du conteneur
    restart: always                      # Redémarre automatiquement en cas d'arrêt
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: cinephoria         # Base de données créée au démarrage
    secrets:
      - mysql_root_password
    volumes:
      - mysql_data:/var/lib/mysql        # Volume pour persister les données
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql  # Script SQL d'initialisation
    networks:
      - cinephoria_network

  redis:
    image: redis:7.0-alpine              # Image légère de Redis
    container_name: redis_db          # Nom du conteneur Redis
    restart: always                      # Redémarre automatiquement
    ports:
      - "6379:6379"                      # Expose le port Redis
    volumes:
      - redis_data:/data                 # Volume pour les données Redis
    networks:
      - cinephoria_network

  server:
    build:
      context: ./server                  # Dossier contenant le backend Node.js
    container_name: backend_server       # Nom du conteneur backend
    restart: unless-stopped              # Redémarre sauf si on l'arrête manuellement
    env_file:
      - ./server/.env                    # Fichier d'environnement
    environment:
      MYSQL_HOST: mysql                 # Lien vers le service MySQL
      REDIS_HOST: redis                 # Lien vers le service Redis
    networks:
      - cinephoria_network
    ports:
      - "${PORT:-8080}:8080"             # Port d'écoute du backend
    depends_on:
      - mysql                            # Attend que MySQL soit prêt
      - redis                            # Attend que Redis soit prêt
    working_dir: /app                    # Répertoire de travail dans le conteneur
    command: npm start                   # Commande pour démarrer le serveur
    volumes:
      - ./db:/db

  nginx-ssl:
    build:
      context: ./nginx-ssl
    container_name: nginx_ssl_proxy
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - nginx
    restart: unless-stopped
    volumes:
      - ssl_certificates:/etc/letsencrypt
      - ssl_challenges:/var/www/certbot
    networks:
      - cinephoria_network

  nginx:
    build:
      context: .           # project root (where both client and nginx folders exist)
      dockerfile: ./nginx/Dockerfile.prod  # correct path to nginx Dockerfile
    container_name: nginx_frontend
    expose:
      - "80"
    depends_on:
      - server
    restart: unless-stopped
    networks:
      - cinephoria_network

volumes:
  mysql_data:                           # Volume persistant pour MySQL
  redis_data:                           # Volume persistant pour Redis
  ssl_certificates:                     # Volume persistant pour les certificats SSL
  ssl_challenges:                       # Volume pour les défis Let's Encrypt

networks:
  cinephoria_network:                   # Réseau interne pour les services

secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt