# CD Pipeline for Cinephoria Cinema Booking Application
# Builds images, pushes to Docker Hub, and deploys to EC2
name: CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push images
      run: |
        # Build and tag images
        docker compose -f Docker-compose.prod.yaml build
        docker tag cinephoria-server:latest ${{ secrets.DOCKERHUB_USERNAME }}/cinephoria-server:latest
        docker tag cinephoria-nginx:latest ${{ secrets.DOCKERHUB_USERNAME }}/cinephoria-nginx:latest
        
        # Also tag with commit SHA for versioning
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/cinephoria-server:latest ${{ secrets.DOCKERHUB_USERNAME }}/cinephoria-server:${{ github.sha }}
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/cinephoria-nginx:latest ${{ secrets.DOCKERHUB_USERNAME }}/cinephoria-nginx:${{ github.sha }}
        
        # Push both latest and SHA tagged versions
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/cinephoria-server:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/cinephoria-nginx:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/cinephoria-server:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/cinephoria-nginx:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          cd /home/ubuntu/cinephoria-deploy
          
          # Clean up
          docker container prune -f           # stopped containers
          docker image prune -a -f            # unused images (old versions)
          docker network prune -f             # unused networks

          # Pull new images and restart services
          docker compose pull
          docker compose up -d
          
          # Optional Health check
          sleep 60
          curl -f http://localhost:8080 || echo "Service not ready yet"